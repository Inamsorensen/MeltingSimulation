#ifndef GRID
#define GRID

#include <vector>

#include <eigen3/Eigen/Core>

#include <ngl/Vec3.h>

#include "CellCentre.h"
#include "CellFace.h"

//------------------------------------------------------------------------------------------------------------------------------------------------------
/// @file Grid.h
/// @brief Grid class for the grid on which all calculations are done. Singleton class as only one grid for the calculation.
/// Contains list of pointers to all grid cell centres and faces.
/// @author Ina M. Sorensen
/// @version 1.0
/// @date 27.06.16
///
/// @todo
//------------------------------------------------------------------------------------------------------------------------------------------------------


class Grid
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Grid create instance, creates grid and returns instance
  /// @param [in] _origin is the position of the grid origin, set to lower, back left corner of grid
  /// @param [in] _gridSize is the size of one lenght of the grid. Grid is always cubic, so same lenght in all directions
  /// @param [in] _noCells is the number of grid cells in one direction. Same number in all directions
  //----------------------------------------------------------------------------------------------------------------------
  static Grid* createGrid(Eigen::Vector3f _origin, float _gridSize, int _noCells);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Get instance of grid
  //----------------------------------------------------------------------------------------------------------------------
  static Grid* getGrid();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Destructor
  //----------------------------------------------------------------------------------------------------------------------
  ~Grid();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Does all calculations for one time step. Updates velocity and temperature through force, pressure and
  /// temperature calculations
  //----------------------------------------------------------------------------------------------------------------------
  void update(float _dt);


private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor. Private for a singleton
  //----------------------------------------------------------------------------------------------------------------------
  Grid(Eigen::Vector3f _origin, float _gridSize, int _noCells);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Instance pointer
  //----------------------------------------------------------------------------------------------------------------------
  static Grid* m_instance;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Location of grid origin. Origin set to lower, back left corner.
  //----------------------------------------------------------------------------------------------------------------------
  Eigen::Vector3f m_origin;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Size of grid along one side. Grid always cubic so same length in all directions.
  //----------------------------------------------------------------------------------------------------------------------
  float m_gridSize;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Number of cells along one side. Same number along all directions
  //----------------------------------------------------------------------------------------------------------------------
  int m_noCells;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Size of a single cell
  //----------------------------------------------------------------------------------------------------------------------
  float m_cellSize;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief List of cell centres. Each cell centre contains data for calculation
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<CellCentre*> m_cellCentres;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief List of cell faces, one in each directions of the face normals. Each cell face contains data for calculations.
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<CellFace*> m_cellFacesX;
  std::vector<CellFace*> m_cellFacesY;
  std::vector<CellFace*> m_cellFacesZ;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Simulation time step
  //----------------------------------------------------------------------------------------------------------------------
  float m_dt;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Calculate interpolation weights for transitions Particle-Grid and Grid-Particle
  //----------------------------------------------------------------------------------------------------------------------
  void calcInterpolationWeights();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Verify whether cell centres and faces are colliding, empty or interior
  //----------------------------------------------------------------------------------------------------------------------
  void classifyCells();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set boundary velocity. Set as stick on collision, ie. zero velocity for colliding faces
  //----------------------------------------------------------------------------------------------------------------------
  void setBoundaryVelocity();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Calculate force due to deviatoric stress
  //----------------------------------------------------------------------------------------------------------------------
  void calcDeviatoricForce();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Calculate velocity after external forces and deviatoric stress has been applied
  //----------------------------------------------------------------------------------------------------------------------
  void calcDeviatoricVelocity();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set up B in Ax=B for the implicit calculation of velocity.
  //----------------------------------------------------------------------------------------------------------------------
  void setUpB_DeviatoricVelocity();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set up A in Ax=B for the implicit calculation of velocity
  //----------------------------------------------------------------------------------------------------------------------
  void setUpA_DeviatoricVelocity();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Calculate rotation matrix R in polar decomposition of the deformation gradient: F=RS
  //----------------------------------------------------------------------------------------------------------------------
  void calculate_dR();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Project velocity to find velocity which agrees with pressure calculations such that incompressibility can
  /// be accounted for
  //----------------------------------------------------------------------------------------------------------------------
  void projectVelocity();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set up B in Ax=B for Poisson equation which solves for pressure
  //----------------------------------------------------------------------------------------------------------------------
  void setUpB_projectVelocity();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set up A in Ax=B for Poisson equation which solves for pressure
  //----------------------------------------------------------------------------------------------------------------------
  void setUpA_projectVelocity();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set boundary pressure values. Set using Neumann boundary condition.
  //----------------------------------------------------------------------------------------------------------------------
  void setBoundaryPressure();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Calculate exact volume of cell at boundaries. If not done, then this volume will be too small, and lead to
  /// errors
  //----------------------------------------------------------------------------------------------------------------------
  void calcBoundaryVolume();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Calculate new temperature values
  //----------------------------------------------------------------------------------------------------------------------
  void calcTemperature();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set up B in Ax=B to solve for temperature
  //----------------------------------------------------------------------------------------------------------------------
  void setUpB_temperature();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set up A in Ax=B to solve for temperature
  //----------------------------------------------------------------------------------------------------------------------
  void setUpA_temperature();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set boundary values for temperature. Set using Neumann boundary condition.
  //----------------------------------------------------------------------------------------------------------------------
  void setBoundaryTemperature();

};

#endif // GRID

