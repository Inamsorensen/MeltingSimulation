#ifndef OPENGLWINDOW
#define OPENGLWINDOW

#include <ngl/Camera.h>
#include <ngl/Colour.h>
#include <ngl/Light.h>
#include <ngl/Text.h>
#include <QTime>
#include <QOpenGLWindow>
#include <memory>

#include "SimulationController.h"

//------------------------------------------------------------------------------------------------------------------------------------------------------
/// @file OpenGLWindow.h
/// @brief Creates OpenGL window to visualise simulation
/// @author Ina M. Sorensen
/// @version 1.0
/// @date 25.06.16
///
/// To do: Doesn't build for some reason. Get loads of errors with QOpenGL
//------------------------------------------------------------------------------------------------------------------------------------------------------

class OpenGLWindow : public QOpenGLWindow
{
  Q_OBJECT
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor for OpenGLWindow class
  //----------------------------------------------------------------------------------------------------------------------
  OpenGLWindow();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Destructor for OpenGLWindow class
  //----------------------------------------------------------------------------------------------------------------------
  ~OpenGLWindow();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Initialise is called when the window is created and sets up default features for the visualisation
  //----------------------------------------------------------------------------------------------------------------------
  void initializeGL();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Called to draw the scene
  //----------------------------------------------------------------------------------------------------------------------
  void paintGL();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Qt Event called when the window is re-sized
  //----------------------------------------------------------------------------------------------------------------------
  void resizeGL(QResizeEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Resizes the window according to the input parameters
  /// @param [in] _w and _h gives new width and height of window
  //----------------------------------------------------------------------------------------------------------------------
  void resizeGL(int _w, int _h);


private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Pointer to Simulation Controller which controls the simulation
  //----------------------------------------------------------------------------------------------------------------------
  SimulationController* m_simulationController;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Pointer to Vertex Array Object used to draw a cube, ie. the bounding box
  //----------------------------------------------------------------------------------------------------------------------
  std::unique_ptr<ngl::VertexArrayObject> m_vao;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief NGL library camera
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Camera m_camera;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Window width and height
  //----------------------------------------------------------------------------------------------------------------------
  int m_windowWidth;
  int m_windowHeight;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Bool which checks whether scene has been rotated by viewer
  //----------------------------------------------------------------------------------------------------------------------
  bool m_rotateScene;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Bool to check if scene has been translated by viewer
  //----------------------------------------------------------------------------------------------------------------------
  bool m_translateScene;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Origin for x and y rotation
  //----------------------------------------------------------------------------------------------------------------------
  int m_originXRot;
  int m_originYRot;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Degree of rotation in x and y direction
  //----------------------------------------------------------------------------------------------------------------------
  int m_rotateX;
  int m_rotateY;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Origin for translation of scene
  //----------------------------------------------------------------------------------------------------------------------
  int m_originXTrans;
  int m_originYTrans;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Scene position after mouse translation
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Vec3 m_scenePosition;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Matrix which stores the transformation done by viewer when translating and rotating the scene
  ///        It is used to transform the objects to be drawn such that they respond to the viewer's transformation calls.
  //----------------------------------------------------------------------------------------------------------------------
  ngl::Mat4 m_transformationScene;


  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructs a Vertex Array Object of a cube, used to draw the bounding box or outline of the grid
  //----------------------------------------------------------------------------------------------------------------------
  void buildVAO();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Visualise grid with cells
  //----------------------------------------------------------------------------------------------------------------------
  void visualiseGrid();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Used to check when a mouse button is pressed
  /// @param [in]: Left: Rotate
  ///              Right: Translate
  //----------------------------------------------------------------------------------------------------------------------
  void mousePressEvent(QMouseEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Used to check how much the mouse has moved so amount of translation or rotation of scene can be verified
  //----------------------------------------------------------------------------------------------------------------------
  void mouseMoveEvent(QMouseEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Used to check when mouse button has been released
  //----------------------------------------------------------------------------------------------------------------------
  void mouseReleaseEvent(QMouseEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Used to check amount of wheel rotation as this will allow viewer to zoom
  //----------------------------------------------------------------------------------------------------------------------
  void wheelEvent(QWheelEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Possible key press events
  /// @param [in]: Esc: Shuts down window and simulation
  ///              F: Full screen
  //----------------------------------------------------------------------------------------------------------------------
  void keyPressEvent(QKeyEvent *_event);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Used to update/run simulation
  //----------------------------------------------------------------------------------------------------------------------
  void timerEvent(QTimerEvent *_event);

};

#endif // OPENGLWINDOW

