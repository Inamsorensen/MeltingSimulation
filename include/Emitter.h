#ifndef EMITTER
#define EMITTER

#include <iostream>
#include <vector>

#include "Particle.h"

//------------------------------------------------------------------------------------------------------------------------------------------------------
/// @file Emitter.h
/// @brief Class which contains and controls the particles making up a simulated object
/// @author Ina M. Sorensen
/// @version 1.0
/// @date 25.06.16
///
/// @todo
//------------------------------------------------------------------------------------------------------------------------------------------------------

class Emitter
{
public:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Constructor
  //----------------------------------------------------------------------------------------------------------------------
  Emitter(int _noParticles, float _particleMass);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Instance creator
  //----------------------------------------------------------------------------------------------------------------------
  ~Emitter();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set material constants
  //----------------------------------------------------------------------------------------------------------------------
  void setStrainConstants(float _lameMuConstant, float _lameLambdaConstant, float _compressionLim, float _stretchLim);
  void setTemperatureConstants(float _heatCapSolid, float _heatCapFluid, float _heatCondSolid, float _heatCondFluid, float _latentHeat, float _freezeTemp);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Set particle positions. Used if particle positions read from file
  //----------------------------------------------------------------------------------------------------------------------
  void setParticlePosition(std::vector<ngl::Vec3>* _particlePositions);
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Instance creator
  //----------------------------------------------------------------------------------------------------------------------
  void updateParticles();
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Instance creator
  //----------------------------------------------------------------------------------------------------------------------
  void renderParticles();

private:
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Instance creator
  //----------------------------------------------------------------------------------------------------------------------
  int m_noParticles;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Instance creator
  //----------------------------------------------------------------------------------------------------------------------
  std::vector<Particle*> m_particles;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Lame constant mu. Depends on the material being simulated
  //----------------------------------------------------------------------------------------------------------------------
  float m_lameMuConstant;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Lame constant lambda. Depends on the material being simulated
  //----------------------------------------------------------------------------------------------------------------------
  float m_lameLambdaConstant;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Heat capacity of solid. Depends on the material being simulated
  //----------------------------------------------------------------------------------------------------------------------
  float m_heatCapacitySolid;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Heat capacity of fluid. Depends on the material being simulated
  //----------------------------------------------------------------------------------------------------------------------
  float m_heatCapacityFluid;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Heat conductivity of solid. Depends on the material being simulated
  //----------------------------------------------------------------------------------------------------------------------
  float m_heatConductivitySolid;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Heat conductivity of fluid. Depends on the material being simulated
  //----------------------------------------------------------------------------------------------------------------------
  float m_heatConductivityFluid;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Latent heat is the heat it takes for solid-fluid and fluid-solid conversion to happen.
  /// Depends on the material being simulated
  //----------------------------------------------------------------------------------------------------------------------
  float m_latentHeat;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Freezing or melting temperature of material being simulated
  //----------------------------------------------------------------------------------------------------------------------
  float m_freezingTemperature;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Compression limit sets the compression value above which compression goes from elastic to plastic+elastic.
  /// Depends on the material being simulated
  //----------------------------------------------------------------------------------------------------------------------
  float m_compressionLimit;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Stretch limit sets the stretch value above which stretch goes from elastic to plastic+elastic.
  /// Depends on the material being simulated
  //----------------------------------------------------------------------------------------------------------------------
  float m_stretchLimit;

  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Shader name used to set which shader to use when rendering particles
  //----------------------------------------------------------------------------------------------------------------------
  std::string m_particleShaderName;
  //----------------------------------------------------------------------------------------------------------------------
  /// @brief Used to set size of the rendered particles
  //----------------------------------------------------------------------------------------------------------------------
  float m_particleRadius;

};

#endif // EMITTER

